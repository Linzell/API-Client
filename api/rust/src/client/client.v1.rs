// This file is @generated by prost-build.
/// Notifications
///
/// Notifications represents the user's notification settings.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Notifications {
    /// email: Whether the user wants to receive email notifications.
    #[prost(bool, tag = "1")]
    pub email: bool,
    /// push: Whether the user wants to receive push notifications.
    #[prost(bool, tag = "2")]
    pub push: bool,
    /// sms: Whether the user wants to receive SMS notifications.
    #[prost(bool, tag = "3")]
    pub sms: bool,
}
/// UpdateNotificationsRequest
///
/// UpdateNotificationsRequest is the request message for updating the user's notification settings.
///
/// Fields:
///
/// - field: The field to update.
/// - value: The value to set.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateNotificationsRequest {
    /// field: The field to update.
    #[prost(string, tag = "1")]
    pub field: ::prost::alloc::string::String,
    /// value: The value to set.
    #[prost(bool, tag = "2")]
    pub value: bool,
}
/// Privacy
///
/// Privacy represents the user's privacy settings.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Privacy {
    /// data_collection: Whether the user wants to allow data collection.
    #[prost(bool, tag = "1")]
    pub data_collection: bool,
    /// location: Whether the user wants to share their location.
    #[prost(bool, tag = "2")]
    pub location: bool,
}
/// UpdatePrivacyRequest
///
/// UpdatePrivacyRequest represents a request to update the user's privacy settings.
///
/// Fields:
///
/// - field: The field to update.
/// - value: The value to set.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdatePrivacyRequest {
    /// field: The field to update.
    #[prost(string, tag = "1")]
    pub field: ::prost::alloc::string::String,
    /// value: The value to set.
    #[prost(bool, tag = "2")]
    pub value: bool,
}
/// Security
///
/// Security represents the user's security settings.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Security {
    /// two_factor: Whether the user wants to enable two-factor authentication.
    #[prost(bool, tag = "1")]
    pub two_factor: bool,
    /// qr_code: The user's QR code for two-factor authentication.
    #[prost(string, tag = "2")]
    pub qr_code: ::prost::alloc::string::String,
    /// magic_link: Whether the user wants to enable magic link authentication.
    #[prost(bool, tag = "3")]
    pub magic_link: bool,
}
/// UpdateSecurityRequest
///
/// UpdateSecurityRequest represents a request to update the user's security settings.
///
/// Fields:
///
/// - field: The field to update.
/// - value: The value to set.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateSecurityRequest {
    /// field: The field to update.
    #[prost(string, tag = "1")]
    pub field: ::prost::alloc::string::String,
    /// value: The value to set.
    #[prost(oneof = "update_security_request::Value", tags = "2, 3")]
    pub value: ::core::option::Option<update_security_request::Value>,
}
/// Nested message and enum types in `UpdateSecurityRequest`.
pub mod update_security_request {
    /// value: The value to set.
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum Value {
        /// two_factor: Whether the user wants to enable two-factor authentication.
        #[prost(bool, tag = "2")]
        TwoFactor(bool),
        /// magic_link: Whether the user wants to enable magic link authentication.
        #[prost(bool, tag = "3")]
        MagicLink(bool),
    }
}
/// Settings
///
/// Settings represents the user's settings.
///
/// Fields:
///
/// - language: The user's language.
/// - theme: The user's theme.
/// - notifications: The user's notification settings.
/// - privacy: The user's privacy settings.
/// - security: The user's security settings.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Settings {
    /// language: The user's language.
    #[prost(enumeration = "Language", optional, tag = "1")]
    pub language: ::core::option::Option<i32>,
    /// theme: The user's theme.
    #[prost(enumeration = "Theme", optional, tag = "2")]
    pub theme: ::core::option::Option<i32>,
    /// notifications: The user's notification settings.
    #[prost(message, optional, tag = "3")]
    pub notifications: ::core::option::Option<Notifications>,
    /// privacy: The user's privacy settings.
    #[prost(message, optional, tag = "4")]
    pub privacy: ::core::option::Option<Privacy>,
    /// security: The user's security settings.
    #[prost(message, optional, tag = "5")]
    pub security: ::core::option::Option<Security>,
}
/// UpdateLanguageRequest
///
/// UpdateLanguageRequest represents a request to update the user's language.
///
/// Fields:
///
/// - language: The user's language.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UpdateLanguageRequest {
    /// language: The user's language.
    #[prost(enumeration = "Language", tag = "1")]
    pub language: i32,
}
/// UpdateThemeRequest
///
/// UpdateThemeRequest represents a request to update the user's theme.
///
/// Fields:
///
/// - theme: The user's theme.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UpdateThemeRequest {
    /// theme: The user's theme.
    #[prost(enumeration = "Theme", tag = "1")]
    pub theme: i32,
}
/// Language
///
/// Enum representing the user's language.
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Language {
    /// LANGUAGE_ENGLISH: English
    English = 0,
    /// LANGUAGE_SPANISH: Spanish
    Spanish = 1,
    /// LANGUAGE_FRENCH: French
    French = 2,
    /// LANGUAGE_GERMAN: German
    German = 3,
    /// LANGUAGE_ITALIAN: Italian
    Italian = 4,
    /// LANGUAGE_JAPANESE: Japanese
    Japanese = 5,
    /// LANGUAGE_KOREAN: Korean
    Korean = 6,
    /// LANGUAGE_CHINESE: Chinese
    Chinese = 7,
    /// LANGUAGE_RUSSIAN: Russian
    Russian = 8,
    /// LANGUAGE_ARABIC: Arabic
    Arabic = 9,
}
impl Language {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Language::English => "LANGUAGE_ENGLISH",
            Language::Spanish => "LANGUAGE_SPANISH",
            Language::French => "LANGUAGE_FRENCH",
            Language::German => "LANGUAGE_GERMAN",
            Language::Italian => "LANGUAGE_ITALIAN",
            Language::Japanese => "LANGUAGE_JAPANESE",
            Language::Korean => "LANGUAGE_KOREAN",
            Language::Chinese => "LANGUAGE_CHINESE",
            Language::Russian => "LANGUAGE_RUSSIAN",
            Language::Arabic => "LANGUAGE_ARABIC",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "LANGUAGE_ENGLISH" => Some(Self::English),
            "LANGUAGE_SPANISH" => Some(Self::Spanish),
            "LANGUAGE_FRENCH" => Some(Self::French),
            "LANGUAGE_GERMAN" => Some(Self::German),
            "LANGUAGE_ITALIAN" => Some(Self::Italian),
            "LANGUAGE_JAPANESE" => Some(Self::Japanese),
            "LANGUAGE_KOREAN" => Some(Self::Korean),
            "LANGUAGE_CHINESE" => Some(Self::Chinese),
            "LANGUAGE_RUSSIAN" => Some(Self::Russian),
            "LANGUAGE_ARABIC" => Some(Self::Arabic),
            _ => None,
        }
    }
}
/// Theme
///
/// Enum representing the user's theme.
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Theme {
    /// THEME_LIGHT: Light theme
    Light = 0,
    /// THEME_DARK: Dark theme
    Dark = 1,
    /// THEME_SYSTEM: System theme
    System = 2,
}
impl Theme {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Theme::Light => "THEME_LIGHT",
            Theme::Dark => "THEME_DARK",
            Theme::System => "THEME_SYSTEM",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "THEME_LIGHT" => Some(Self::Light),
            "THEME_DARK" => Some(Self::Dark),
            "THEME_SYSTEM" => Some(Self::System),
            _ => None,
        }
    }
}
/// User
///
/// User represents a user in the system.
///
/// Fields:
///
/// - email: The email address of the user.
/// - avatar: The URL of the user's avatar.
/// - settings: The user's settings.
/// - is_admin: Whether the user is an admin.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct User {
    /// email: The email address of the user.
    #[prost(string, tag = "1")]
    pub email: ::prost::alloc::string::String,
    /// avatar: The URL of the user's avatar.
    #[prost(string, optional, tag = "2")]
    pub avatar: ::core::option::Option<::prost::alloc::string::String>,
    /// settings: The user's settings.
    #[prost(message, optional, tag = "3")]
    pub settings: ::core::option::Option<Settings>,
    /// is_admin: Whether the user is an admin.
    #[prost(bool, tag = "4")]
    pub is_admin: bool,
}
/// UpdateEmailRequest
///
/// UpdateEmailRequest represents a request to update the user's email.
///
/// Fields:
///
/// - email: The new email address.
/// - temp_token: The temporary token.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateEmailRequest {
    /// email: The new email address.
    #[prost(string, tag = "1")]
    pub email: ::prost::alloc::string::String,
    /// temp_token: The temporary token.
    #[prost(string, tag = "2")]
    pub temp_token: ::prost::alloc::string::String,
}
/// UpdatePasswordRequest
///
/// UpdatePasswordRequest represents a request to update the user's password.
///
/// Fields:
///
/// - password: The new password.
/// - old_password: The old password.
/// - temp_token: The temporary token.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdatePasswordRequest {
    /// password: The new password.
    #[prost(string, tag = "1")]
    pub password: ::prost::alloc::string::String,
    /// old_password: The old password.
    #[prost(string, tag = "2")]
    pub old_password: ::prost::alloc::string::String,
    /// temp_token: The temporary token.
    #[prost(string, tag = "3")]
    pub temp_token: ::prost::alloc::string::String,
}
/// UploadAvatarRequest
///
/// UploadAvatarRequest represents a request to upload the user's avatar.
///
/// Fields:
///
/// - file: The file to upload.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UploadAvatarRequest {
    /// file: The file to upload.
    #[prost(message, optional, tag = "1")]
    pub file: ::core::option::Option<crate::common::v1::File>,
}
/// UploadAvatarResponse
///
/// UploadAvatarResponse represents a response to uploading the user's avatar.
///
/// Returns:
///
/// - url: The URL of the uploaded avatar.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UploadAvatarResponse {
    /// url: The URL of the uploaded avatar.
    #[prost(string, tag = "1")]
    pub url: ::prost::alloc::string::String,
}
/// Generated client implementations.
pub mod client_service_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// ClientService
    #[derive(Debug, Clone)]
    pub struct ClientServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl ClientServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> ClientServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> ClientServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            ClientServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// ReadUser
        pub async fn read_user(
            &mut self,
            request: impl tonic::IntoRequest<::pbjson_types::Empty>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::User>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/client.v1.ClientService/ReadUser",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("client.v1.ClientService", "ReadUser"));
            self.inner.server_streaming(req, path, codec).await
        }
        /// DeleteUser
        pub async fn delete_user(
            &mut self,
            request: impl tonic::IntoRequest<::pbjson_types::Empty>,
        ) -> std::result::Result<tonic::Response<::pbjson_types::Empty>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/client.v1.ClientService/DeleteUser",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("client.v1.ClientService", "DeleteUser"));
            self.inner.unary(req, path, codec).await
        }
        /// DisableUser
        pub async fn disable_user(
            &mut self,
            request: impl tonic::IntoRequest<::pbjson_types::Empty>,
        ) -> std::result::Result<tonic::Response<::pbjson_types::Empty>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/client.v1.ClientService/DisableUser",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("client.v1.ClientService", "DisableUser"));
            self.inner.unary(req, path, codec).await
        }
        /// SendEmailToChangeEmail
        pub async fn send_email_to_change_email(
            &mut self,
            request: impl tonic::IntoRequest<::pbjson_types::Empty>,
        ) -> std::result::Result<tonic::Response<::pbjson_types::Empty>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/client.v1.ClientService/SendEmailToChangeEmail",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("client.v1.ClientService", "SendEmailToChangeEmail"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// SendEmailToChangePassword
        pub async fn send_email_to_change_password(
            &mut self,
            request: impl tonic::IntoRequest<::pbjson_types::Empty>,
        ) -> std::result::Result<tonic::Response<::pbjson_types::Empty>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/client.v1.ClientService/SendEmailToChangePassword",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "client.v1.ClientService",
                        "SendEmailToChangePassword",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// UpdateEmail
        pub async fn update_email(
            &mut self,
            request: impl tonic::IntoRequest<super::UpdateEmailRequest>,
        ) -> std::result::Result<tonic::Response<::pbjson_types::Empty>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/client.v1.ClientService/UpdateEmail",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("client.v1.ClientService", "UpdateEmail"));
            self.inner.unary(req, path, codec).await
        }
        /// UpdatePassword
        pub async fn update_password(
            &mut self,
            request: impl tonic::IntoRequest<super::UpdatePasswordRequest>,
        ) -> std::result::Result<tonic::Response<::pbjson_types::Empty>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/client.v1.ClientService/UpdatePassword",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("client.v1.ClientService", "UpdatePassword"));
            self.inner.unary(req, path, codec).await
        }
        /// UploadAvatar
        pub async fn upload_avatar(
            &mut self,
            request: impl tonic::IntoRequest<super::UploadAvatarRequest>,
        ) -> std::result::Result<
            tonic::Response<super::UploadAvatarResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/client.v1.ClientService/UploadAvatar",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("client.v1.ClientService", "UploadAvatar"));
            self.inner.unary(req, path, codec).await
        }
        /// UpdateLanguage
        pub async fn update_language(
            &mut self,
            request: impl tonic::IntoRequest<super::UpdateLanguageRequest>,
        ) -> std::result::Result<tonic::Response<::pbjson_types::Empty>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/client.v1.ClientService/UpdateLanguage",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("client.v1.ClientService", "UpdateLanguage"));
            self.inner.unary(req, path, codec).await
        }
        /// UpdateTheme
        pub async fn update_theme(
            &mut self,
            request: impl tonic::IntoRequest<super::UpdateThemeRequest>,
        ) -> std::result::Result<tonic::Response<::pbjson_types::Empty>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/client.v1.ClientService/UpdateTheme",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("client.v1.ClientService", "UpdateTheme"));
            self.inner.unary(req, path, codec).await
        }
        /// UpdateNotifications
        pub async fn update_notifications(
            &mut self,
            request: impl tonic::IntoRequest<super::UpdateNotificationsRequest>,
        ) -> std::result::Result<tonic::Response<::pbjson_types::Empty>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/client.v1.ClientService/UpdateNotifications",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("client.v1.ClientService", "UpdateNotifications"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// UpdatePrivacy
        pub async fn update_privacy(
            &mut self,
            request: impl tonic::IntoRequest<super::UpdatePrivacyRequest>,
        ) -> std::result::Result<tonic::Response<::pbjson_types::Empty>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/client.v1.ClientService/UpdatePrivacy",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("client.v1.ClientService", "UpdatePrivacy"));
            self.inner.unary(req, path, codec).await
        }
        /// UpdateSecurity
        pub async fn update_security(
            &mut self,
            request: impl tonic::IntoRequest<super::UpdateSecurityRequest>,
        ) -> std::result::Result<tonic::Response<::pbjson_types::Empty>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/client.v1.ClientService/UpdateSecurity",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("client.v1.ClientService", "UpdateSecurity"));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod client_service_server {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with ClientServiceServer.
    #[async_trait]
    pub trait ClientService: std::marker::Send + std::marker::Sync + 'static {
        /// Server streaming response type for the ReadUser method.
        type ReadUserStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<super::User, tonic::Status>,
            >
            + std::marker::Send
            + 'static;
        /// ReadUser
        async fn read_user(
            &self,
            request: tonic::Request<::pbjson_types::Empty>,
        ) -> std::result::Result<tonic::Response<Self::ReadUserStream>, tonic::Status>;
        /// DeleteUser
        async fn delete_user(
            &self,
            request: tonic::Request<::pbjson_types::Empty>,
        ) -> std::result::Result<tonic::Response<::pbjson_types::Empty>, tonic::Status>;
        /// DisableUser
        async fn disable_user(
            &self,
            request: tonic::Request<::pbjson_types::Empty>,
        ) -> std::result::Result<tonic::Response<::pbjson_types::Empty>, tonic::Status>;
        /// SendEmailToChangeEmail
        async fn send_email_to_change_email(
            &self,
            request: tonic::Request<::pbjson_types::Empty>,
        ) -> std::result::Result<tonic::Response<::pbjson_types::Empty>, tonic::Status>;
        /// SendEmailToChangePassword
        async fn send_email_to_change_password(
            &self,
            request: tonic::Request<::pbjson_types::Empty>,
        ) -> std::result::Result<tonic::Response<::pbjson_types::Empty>, tonic::Status>;
        /// UpdateEmail
        async fn update_email(
            &self,
            request: tonic::Request<super::UpdateEmailRequest>,
        ) -> std::result::Result<tonic::Response<::pbjson_types::Empty>, tonic::Status>;
        /// UpdatePassword
        async fn update_password(
            &self,
            request: tonic::Request<super::UpdatePasswordRequest>,
        ) -> std::result::Result<tonic::Response<::pbjson_types::Empty>, tonic::Status>;
        /// UploadAvatar
        async fn upload_avatar(
            &self,
            request: tonic::Request<super::UploadAvatarRequest>,
        ) -> std::result::Result<
            tonic::Response<super::UploadAvatarResponse>,
            tonic::Status,
        >;
        /// UpdateLanguage
        async fn update_language(
            &self,
            request: tonic::Request<super::UpdateLanguageRequest>,
        ) -> std::result::Result<tonic::Response<::pbjson_types::Empty>, tonic::Status>;
        /// UpdateTheme
        async fn update_theme(
            &self,
            request: tonic::Request<super::UpdateThemeRequest>,
        ) -> std::result::Result<tonic::Response<::pbjson_types::Empty>, tonic::Status>;
        /// UpdateNotifications
        async fn update_notifications(
            &self,
            request: tonic::Request<super::UpdateNotificationsRequest>,
        ) -> std::result::Result<tonic::Response<::pbjson_types::Empty>, tonic::Status>;
        /// UpdatePrivacy
        async fn update_privacy(
            &self,
            request: tonic::Request<super::UpdatePrivacyRequest>,
        ) -> std::result::Result<tonic::Response<::pbjson_types::Empty>, tonic::Status>;
        /// UpdateSecurity
        async fn update_security(
            &self,
            request: tonic::Request<super::UpdateSecurityRequest>,
        ) -> std::result::Result<tonic::Response<::pbjson_types::Empty>, tonic::Status>;
    }
    /// ClientService
    #[derive(Debug)]
    pub struct ClientServiceServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> ClientServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for ClientServiceServer<T>
    where
        T: ClientService,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/client.v1.ClientService/ReadUser" => {
                    #[allow(non_camel_case_types)]
                    struct ReadUserSvc<T: ClientService>(pub Arc<T>);
                    impl<
                        T: ClientService,
                    > tonic::server::ServerStreamingService<::pbjson_types::Empty>
                    for ReadUserSvc<T> {
                        type Response = super::User;
                        type ResponseStream = T::ReadUserStream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<::pbjson_types::Empty>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ClientService>::read_user(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ReadUserSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.server_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/client.v1.ClientService/DeleteUser" => {
                    #[allow(non_camel_case_types)]
                    struct DeleteUserSvc<T: ClientService>(pub Arc<T>);
                    impl<
                        T: ClientService,
                    > tonic::server::UnaryService<::pbjson_types::Empty>
                    for DeleteUserSvc<T> {
                        type Response = ::pbjson_types::Empty;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<::pbjson_types::Empty>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ClientService>::delete_user(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = DeleteUserSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/client.v1.ClientService/DisableUser" => {
                    #[allow(non_camel_case_types)]
                    struct DisableUserSvc<T: ClientService>(pub Arc<T>);
                    impl<
                        T: ClientService,
                    > tonic::server::UnaryService<::pbjson_types::Empty>
                    for DisableUserSvc<T> {
                        type Response = ::pbjson_types::Empty;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<::pbjson_types::Empty>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ClientService>::disable_user(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = DisableUserSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/client.v1.ClientService/SendEmailToChangeEmail" => {
                    #[allow(non_camel_case_types)]
                    struct SendEmailToChangeEmailSvc<T: ClientService>(pub Arc<T>);
                    impl<
                        T: ClientService,
                    > tonic::server::UnaryService<::pbjson_types::Empty>
                    for SendEmailToChangeEmailSvc<T> {
                        type Response = ::pbjson_types::Empty;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<::pbjson_types::Empty>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ClientService>::send_email_to_change_email(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SendEmailToChangeEmailSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/client.v1.ClientService/SendEmailToChangePassword" => {
                    #[allow(non_camel_case_types)]
                    struct SendEmailToChangePasswordSvc<T: ClientService>(pub Arc<T>);
                    impl<
                        T: ClientService,
                    > tonic::server::UnaryService<::pbjson_types::Empty>
                    for SendEmailToChangePasswordSvc<T> {
                        type Response = ::pbjson_types::Empty;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<::pbjson_types::Empty>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ClientService>::send_email_to_change_password(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SendEmailToChangePasswordSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/client.v1.ClientService/UpdateEmail" => {
                    #[allow(non_camel_case_types)]
                    struct UpdateEmailSvc<T: ClientService>(pub Arc<T>);
                    impl<
                        T: ClientService,
                    > tonic::server::UnaryService<super::UpdateEmailRequest>
                    for UpdateEmailSvc<T> {
                        type Response = ::pbjson_types::Empty;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::UpdateEmailRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ClientService>::update_email(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = UpdateEmailSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/client.v1.ClientService/UpdatePassword" => {
                    #[allow(non_camel_case_types)]
                    struct UpdatePasswordSvc<T: ClientService>(pub Arc<T>);
                    impl<
                        T: ClientService,
                    > tonic::server::UnaryService<super::UpdatePasswordRequest>
                    for UpdatePasswordSvc<T> {
                        type Response = ::pbjson_types::Empty;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::UpdatePasswordRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ClientService>::update_password(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = UpdatePasswordSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/client.v1.ClientService/UploadAvatar" => {
                    #[allow(non_camel_case_types)]
                    struct UploadAvatarSvc<T: ClientService>(pub Arc<T>);
                    impl<
                        T: ClientService,
                    > tonic::server::UnaryService<super::UploadAvatarRequest>
                    for UploadAvatarSvc<T> {
                        type Response = super::UploadAvatarResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::UploadAvatarRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ClientService>::upload_avatar(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = UploadAvatarSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/client.v1.ClientService/UpdateLanguage" => {
                    #[allow(non_camel_case_types)]
                    struct UpdateLanguageSvc<T: ClientService>(pub Arc<T>);
                    impl<
                        T: ClientService,
                    > tonic::server::UnaryService<super::UpdateLanguageRequest>
                    for UpdateLanguageSvc<T> {
                        type Response = ::pbjson_types::Empty;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::UpdateLanguageRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ClientService>::update_language(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = UpdateLanguageSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/client.v1.ClientService/UpdateTheme" => {
                    #[allow(non_camel_case_types)]
                    struct UpdateThemeSvc<T: ClientService>(pub Arc<T>);
                    impl<
                        T: ClientService,
                    > tonic::server::UnaryService<super::UpdateThemeRequest>
                    for UpdateThemeSvc<T> {
                        type Response = ::pbjson_types::Empty;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::UpdateThemeRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ClientService>::update_theme(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = UpdateThemeSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/client.v1.ClientService/UpdateNotifications" => {
                    #[allow(non_camel_case_types)]
                    struct UpdateNotificationsSvc<T: ClientService>(pub Arc<T>);
                    impl<
                        T: ClientService,
                    > tonic::server::UnaryService<super::UpdateNotificationsRequest>
                    for UpdateNotificationsSvc<T> {
                        type Response = ::pbjson_types::Empty;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::UpdateNotificationsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ClientService>::update_notifications(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = UpdateNotificationsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/client.v1.ClientService/UpdatePrivacy" => {
                    #[allow(non_camel_case_types)]
                    struct UpdatePrivacySvc<T: ClientService>(pub Arc<T>);
                    impl<
                        T: ClientService,
                    > tonic::server::UnaryService<super::UpdatePrivacyRequest>
                    for UpdatePrivacySvc<T> {
                        type Response = ::pbjson_types::Empty;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::UpdatePrivacyRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ClientService>::update_privacy(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = UpdatePrivacySvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/client.v1.ClientService/UpdateSecurity" => {
                    #[allow(non_camel_case_types)]
                    struct UpdateSecuritySvc<T: ClientService>(pub Arc<T>);
                    impl<
                        T: ClientService,
                    > tonic::server::UnaryService<super::UpdateSecurityRequest>
                    for UpdateSecuritySvc<T> {
                        type Response = ::pbjson_types::Empty;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::UpdateSecurityRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ClientService>::update_security(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = UpdateSecuritySvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        Ok(
                            http::Response::builder()
                                .status(200)
                                .header("grpc-status", tonic::Code::Unimplemented as i32)
                                .header(
                                    http::header::CONTENT_TYPE,
                                    tonic::metadata::GRPC_CONTENT_TYPE,
                                )
                                .body(empty_body())
                                .unwrap(),
                        )
                    })
                }
            }
        }
    }
    impl<T> Clone for ClientServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "client.v1.ClientService";
    impl<T> tonic::server::NamedService for ClientServiceServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
